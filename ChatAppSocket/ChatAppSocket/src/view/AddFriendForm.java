/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;


import java.awt.Color;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Group;
import model.User;
import view.HomeForm;

/**
 *
 * @author Chuong
 */
public class AddFriendForm extends javax.swing.JFrame {

    /**
     * Creates new form SearchUserForm
     */
    private Socket socket;
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    private User user;
    private ArrayList<User> listFriendRequest;
    private ArrayList<Group> listGroup;
    private ArrayList<User> listUserSearch;

    public AddFriendForm(User user, ObjectOutputStream oos, ObjectInputStream ois, ArrayList<User> listFriendRequest) throws IOException, ClassNotFoundException {
        initComponents();
        this.ois = ois;
        this.oos = oos;
        this.user = user;
        this.listUserSearch = new ArrayList<>();
        this.listFriendRequest = listFriendRequest;
//        getAddFriend();
        showRequestFriend();

//        this.listGroup = listGroup;
//        this.listUser = listUser;
    }

    public void showRequestFriend() throws IOException, ClassNotFoundException {

        DefaultTableModel dtm = new DefaultTableModel();
        dtm.setRowCount(0);
        dtm.setColumnIdentifiers(new String[]{"Nick Name", "Action"});
        for (User user : listFriendRequest) {
            dtm.addRow(new String[]{user.getName(), "confirm"});
        }
        tblFriendRequest.setModel(dtm);
    }

    public void showDataTableSearch() {
        DefaultTableModel dtm = new DefaultTableModel();
        dtm.setRowCount(0);
        dtm.setColumnIdentifiers(new String[]{"Name","Status"});
        for (User user : listUserSearch) {
            //dtm.addRow(new String[]{user.getName(), (listRelationship.get(user.getName()) == 1) ? "friend" : ((listRelationship.get(user.getName()) == 2) ? "added friend" : ((listRelationship.get(user.getName()) == 3) ? "confirm" : "add friend"))});
            dtm.addRow(new String[]{user.getName(),(user.getRelationship()==0)?"Add friend":((user.getRelationship()==1)?"Is friend":((user.getRelationship()==2)?"Sent friend":"Confirm"))});
        }
        tblUserSearch.setModel(dtm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        edtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblFriendRequest = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblUserSearch = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Search User");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setText("Search user");

        edtSearch.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        edtSearch.setForeground(new java.awt.Color(153, 153, 153));
        edtSearch.setText("Search");
        edtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtSearchFocusLost(evt);
            }
        });

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_tim_kiem.png"))); // NOI18N
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchMouseClicked(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(255, 255, 255));
        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Friend request:");

        tblFriendRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblFriendRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFriendRequestMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblFriendRequest);

        tblUserSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblUserSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUserSearchMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblUserSearch);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(328, 328, 328)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(edtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(edtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnSearch)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void edtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtSearchFocusGained
        // TODO add your handling code here:
        if (edtSearch.getText().equals("Search")) {
            edtSearch.setText("");
            edtSearch.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_edtSearchFocusGained

    private void edtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtSearchFocusLost
        // TODO add your handling code here:
        if (edtSearch.getText().equals("")) {
            edtSearch.setText("Search");
            edtSearch.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_edtSearchFocusLost

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        try {
            // TODO add your handling code here:
            (new HomeForm(socket, user, ois, oos, -1)).setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(AddFriendForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseClicked
        // TODO add your handling code here:
        String keySearch = edtSearch.getText().toString();
        try {
            oos.writeObject("CMD_SEARCH_USER|" + keySearch);
        } catch (IOException ex) {
            Logger.getLogger(AddFriendForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            listUserSearch = (ArrayList<User>) ois.readObject();
//            listRelationship = (Map<String, Integer>) ois.readObject();
        } catch (IOException ex) {
            Logger.getLogger(AddFriendForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddFriendForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (listUserSearch.size() != 0) {
            showDataTableSearch();
        }
    }//GEN-LAST:event_btnSearchMouseClicked

    private void tblFriendRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFriendRequestMouseClicked
        // TODO add your handling code here:
        int column = tblFriendRequest.getColumnModel().getColumnIndexAtX(evt.getX()); // get the coloum of the button
        int row = evt.getY() / tblFriendRequest.getRowHeight(); // get row 
        // *Checking the row or column is valid or not
        if (row < tblFriendRequest.getRowCount() && row >= 0
                && column < tblFriendRequest.getColumnCount() && column >= 0) {
            User actionUser = listFriendRequest.get(row);
            int choice = JOptionPane.showConfirmDialog(this, "Do you want confirm friend " + actionUser.getName() + " ?", "Ask", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                try {
                    oos.writeObject("CMD_CONFIRM_ADD_FRIEND|" + user.getUserId() + "|" + actionUser.getUserId());
                    actionUser.setRelationship(1);
                    user.getListFriend().add(actionUser);
                    listFriendRequest.remove(actionUser);
                    for(int i=0;i<listUserSearch.size();i++){
                        if(actionUser.getUserId()==listUserSearch.get(i).getUserId()){
                            listUserSearch.get(i).setRelationship(1);
                            showDataTableSearch();
                            break;
                        }
                    }
                    showRequestFriend();
                } catch (IOException ex) {
                    Logger.getLogger(AddFriendForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(AddFriendForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_tblFriendRequestMouseClicked

    private void tblUserSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUserSearchMouseClicked
        // TODO add your handling code here:
        int column = tblUserSearch.getColumnModel().
                getColumnIndexAtX(evt.getX()); // get the coloum of the button
        int row = evt.getY() / tblUserSearch.getRowHeight(); // get row 
        // *Checking the row or column is valid or not
        if (row < tblUserSearch.getRowCount() && row >= 0
                && column < tblUserSearch.getColumnCount() && column >= 0) {
            User actionUser = listUserSearch.get(row);
            if (actionUser.getRelationship()==1) {
                int choice = JOptionPane.showConfirmDialog(this, "Do you want delete friend " + actionUser.getName() + " ?", "Ask", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    try {
                        oos.writeObject("CMD_DELETE_FRIEND|" + user.getUserId() + "|" + actionUser.getUserId());
                        user.getListFriend().remove(actionUser);
                        listUserSearch.get(row).setRelationship(0);
                        showDataTableSearch();
                    } catch (IOException ex) {
                        Logger.getLogger(AddFriendForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                if (actionUser.getRelationship()==0) {
                    int choice = JOptionPane.showConfirmDialog(this, "Do you want add friend " + actionUser.getName() + " ?", "Ask", JOptionPane.YES_NO_OPTION);
                    if (choice == JOptionPane.YES_OPTION) {
                        try {
                            oos.writeObject("CMD_ADD_FRIEND|" + user.getUserId() + "|" + actionUser.getUserId());
                            listUserSearch.get(row).setRelationship(2);
                            showDataTableSearch();
                        } catch (IOException ex) {
                            Logger.getLogger(AddFriendForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } else {
                    if (actionUser.getRelationship()==3) {
                        int choice = JOptionPane.showConfirmDialog(this, "Do you want confirm friend " + actionUser.getName() + " ?", "Ask", JOptionPane.YES_NO_OPTION);
                        if (choice == JOptionPane.YES_OPTION) {
                            try {
                                oos.writeObject("CMD_CONFIRM_ADD_FRIEND|" + user.getUserId() + "|" + actionUser.getUserId());
                                user.getListFriend().add(actionUser);
                                listUserSearch.get(row).setRelationship(1);
                                showDataTableSearch();
                            } catch (IOException ex) {
                                Logger.getLogger(AddFriendForm.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "You sent request this friend!");
                    }
                }
            }
        }

        
    }//GEN-LAST:event_tblUserSearchMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JLabel btnSearch;
    private javax.swing.JTextField edtSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblFriendRequest;
    private javax.swing.JTable tblUserSearch;
    // End of variables declaration//GEN-END:variables
}
